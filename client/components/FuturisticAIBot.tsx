import React, { useState, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Bot,
  Send,
  Mic,
  MicOff,
  Brain,
  Sparkles,
  Zap,
  Eye,
  MessageCircle,
  X,
  Minimize2,
  Maximize2,
  Star,
  Lightbulb,
  Palette,
  Monitor,
  FileText,
  Wand2,
} from "lucide-react";

interface Message {
  id: string;
  type: "user" | "bot";
  content: string;
  timestamp: Date;
  suggestions?: string[];
  aiAnalysis?: {
    sentiment: "positive" | "neutral" | "negative";
    intent: string;
    confidence: number;
  };
}

interface FuturisticAIBotProps {
  isOpen: boolean;
  onToggle: () => void;
  onServiceRequest?: (service: string) => void;
}

const FuturisticAIBot: React.FC<FuturisticAIBotProps> = ({
  isOpen,
  onToggle,
  onServiceRequest,
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [botPersonality, setBotPersonality] = useState("professional");
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  // Messages d'introduction
  const introMessages = [
    {
      id: "1",
      type: "bot" as const,
      content:
        "üöÄ Salut ! Je suis MGS IA, votre assistant cr√©atif intelligent chez Mind Graphix Solution. J'analyse vos besoins avec pr√©cision pour vous connecter √† nos designers experts. Pr√™t √† cr√©er quelque chose d'exceptionnel ?",
      timestamp: new Date(),
      suggestions: [
        "Cr√©er un logo professionnel",
        "D√©velopper un site web",
        "Design print premium",
        "Voir nos r√©alisations",
      ],
    },
  ];

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setMessages(introMessages);
    }
  }, [isOpen]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const analyzeMessage = (message: string) => {
    // Simulation d'analyse IA
    const positiveWords = [
      "excellent",
      "parfait",
      "g√©nial",
      "super",
      "merci",
      "oui",
    ];
    const negativeWords = [
      "probl√®me",
      "erreur",
      "non",
      "difficile",
      "impossible",
    ];

    const words = message.toLowerCase().split(" ");
    const hasPositive = words.some((word) => positiveWords.includes(word));
    const hasNegative = words.some((word) => negativeWords.includes(word));

    let sentiment: "positive" | "neutral" | "negative" = "neutral";
    if (hasPositive && !hasNegative) sentiment = "positive";
    if (hasNegative && !hasPositive) sentiment = "negative";

    // D√©tection d'intention
    let intent = "general";
    if (words.some((w) => ["logo", "identit√©", "marque"].includes(w)))
      intent = "logo_design";
    if (words.some((w) => ["site", "web", "internet"].includes(w)))
      intent = "website";
    if (
      words.some((w) =>
        [
          "affiche",
          "flyer",
          "brochure",
          "print",
          "impression",
          "carte",
        ].includes(w),
      )
    )
      intent = "print_design";
    if (words.some((w) => ["branding", "charte", "guideline"].includes(w)))
      intent = "branding";
    if (words.some((w) => ["prix", "co√ªt", "devis", "tarif"].includes(w)))
      intent = "pricing";
    if (words.some((w) => ["contact", "email", "t√©l√©phone"].includes(w)))
      intent = "contact";

    return {
      sentiment,
      intent,
      confidence: Math.random() * 0.3 + 0.7, // 70-100%
    };
  };

  const getPrintDesignResponse = (message: string, context: any) => {
    if (context.isFirstInteraction) {
      return {
        content:
          "üñ®Ô∏è Fantastique ! Nos graphistes experts cr√©ent des supports print exceptionnels. Ils ma√Ætrisent parfaitement les contraintes d'impression et utilisent des outils avanc√©s pour optimiser les couleurs. Quel type de support vous int√©resse ?",
        suggestions: [
          "Affiches publicitaires",
          "Brochures commerciales",
          "Cartes de visite premium",
          "Flyers √©v√©nements",
          "Packaging produit",
          "Voir portfolio print",
        ],
      };
    } else if (!context.hasIndustry) {
      return {
        content:
          "üé® Excellent choix ! Dans quel secteur √©voluez-vous ? Nos graphistes adaptent le style selon votre domaine pour maximiser l'impact visuel de vos supports.",
        suggestions: [
          "√âv√©nementiel",
          "Commerce/Retail",
          "Sant√©/M√©dical",
          "Technologie",
          "Restauration",
          "Services professionnels",
        ],
      };
    } else if (context.urgency === "high") {
      return {
        content:
          "‚ö° Je comprends l'urgence ! Nos graphistes ont l'habitude des d√©lais serr√©s. Ils peuvent cr√©er des supports exceptionnels rapidement. Quel est votre d√©lai exact ?",
        suggestions: [
          "Dans 2-3 jours",
          "Cette semaine",
          "Avant le weekend",
          "Express 24h",
          "Parler directement au graphiste",
        ],
      };
    } else {
      return {
        content:
          "‚ú® Parfait ! Nos graphistes vont cr√©er quelque chose d'exceptionnel. Avez-vous des √©l√©ments visuels existants (logo, photos) ou faut-il tout cr√©er ?",
        suggestions: [
          "J'ai d√©j√† un logo",
          "Cr√©er logo + support",
          "J'ai des photos",
          "Cr√©ation compl√®te",
          "Voir exemples similaires",
        ],
      };
    }
  };

  const getBrandingResponse = (message: string, context: any) => {
    if (context.businessSize === "small") {
      return {
        content:
          "‚≠ê Parfait pour une startup ! Nos designers cr√©ent des identit√©s fortes qui marquent les esprits. Ils comprennent les enjeux des jeunes entreprises et proposent des solutions √©volutives. Vous avez d√©j√† un nom/concept ?",
        suggestions: [
          "J'ai le nom",
          "Besoin d'aide naming",
          "Concept d√©fini",
          "Tout √† cr√©er",
          "Voir identit√©s startup",
          "Budget startup",
        ],
      };
    } else if (context.experienceLevel === "experienced") {
      return {
        content:
          "üöÄ Excellent ! Vous connaissez l'importance d'une identit√© forte. Nos designers senior vont cr√©er quelque chose qui d√©passe vos attentes. S'agit-il d'une refonte ou d'une extension ?",
        suggestions: [
          "Refonte compl√®te",
          "Evolution identit√©",
          "Extension gamme",
          "Nouveau positionnement",
          "Voir refontes r√©alis√©es",
        ],
      };
    } else {
      return {
        content:
          "‚ú® L'identit√© de marque est notre sp√©cialit√© ! Nos designers cr√©ent des univers visuels coh√©rents qui racontent votre histoire. Vous souhaitez une approche compl√®te ou cibl√©e ?",
        suggestions: [
          "Identit√© compl√®te",
          "Logo + charte",
          "Charte existante",
          "Applications sp√©cifiques",
          "Voir portfolio branding",
        ],
      };
    }
  };

  const getConversationContext = () => {
    const recentMessages = messages.slice(-6); // Derniers 6 messages
    const userMessages = recentMessages
      .filter((m) => m.type === "user")
      .map((m) => m.content.toLowerCase());
    return {
      hasCompanyName: userMessages.some(
        (msg) =>
          msg.includes("entreprise") ||
          msg.includes("soci√©t√©") ||
          msg.includes("nom") ||
          msg.includes("appelle"),
      ),
      hasBudget: userMessages.some(
        (msg) =>
          msg.includes("budget") ||
          msg.includes("prix") ||
          msg.includes("co√ªt") ||
          msg.includes("‚Ç¨"),
      ),
      hasDeadline: userMessages.some(
        (msg) =>
          msg.includes("d√©lai") ||
          msg.includes("urgent") ||
          msg.includes("quand"),
      ),
      hasIndustry: userMessages.some(
        (msg) =>
          msg.includes("secteur") ||
          msg.includes("domaine") ||
          msg.includes("activit√©") ||
          msg.includes("technologie") ||
          msg.includes("sant√©"),
      ),
      isFirstInteraction: messages.length <= 2,
      hasServiceType: userMessages.some(
        (msg) =>
          msg.includes("logo") ||
          msg.includes("site") ||
          msg.includes("affiche") ||
          msg.includes("brochure"),
      ),
    };
  };

  const getLogoDesignResponse = (message: string, context: any) => {
    if (context.isFirstInteraction || !context.hasCompanyName) {
      return {
        content:
          "üé® Parfait ! Nos designers experts vont cr√©er un logo unique pour vous. Notre √©quipe combine talent artistique et outils d'analyse pour des r√©sultats exceptionnels. Pour commencer, quel est le nom de votre entreprise ?",
        suggestions: [
          "Mon entreprise s'appelle...",
          "C'est une startup",
          "C'est une grande entreprise",
          "Voir des exemples de logos",
        ],
      };
    } else if (!context.hasIndustry) {
      return {
        content:
          "‚ú® Excellent ! Maintenant, dans quel secteur d'activit√© √©voluez-vous ? Nos designers adaptent le style selon votre domaine pour maximiser l'impact.",
        suggestions: [
          "Technologie",
          "Sant√©/M√©dical",
          "Finance",
          "E-commerce",
          "Restauration",
          "Autre secteur",
        ],
      };
    } else if (!context.hasBudget) {
      return {
        content:
          "üéØ Parfait ! Nos designers ont une excellente compr√©hension de votre secteur. Quel budget avez-vous pr√©vu pour votre logo ? Cela nous aide √† proposer la formule la plus adapt√©e.",
        suggestions: [
          "Moins de 1000‚Ç¨",
          "1000‚Ç¨ - 3000‚Ç¨",
          "3000‚Ç¨ - 5000‚Ç¨",
          "Plus de 5000‚Ç¨",
          "√Ä discuter",
        ],
      };
    } else {
      return {
        content:
          "üöÄ Excellent ! J'ai toutes les infos pour que nos designers commencent. Souhaitez-vous voir notre portfolio de logos ou directement remplir le brief cr√©atif d√©taill√© ?",
        suggestions: [
          "Voir le portfolio",
          "Commencer le brief",
          "Parler √† un designer",
          "Demander un devis",
        ],
      };
    }
  };

  const getWebsiteResponse = (message: string, context: any) => {
    if (context.isFirstInteraction) {
      return {
        content:
          "üåê Excellent choix ! Nos d√©veloppeurs et designers web cr√©ent des sites exceptionnels. Nous utilisons des outils d'analyse pour optimiser l'UX, mais c'est notre √©quipe humaine qui donne vie √† votre vision. Quel type de site souhaitez-vous ?",
        suggestions: [
          "Site vitrine",
          "E-commerce",
          "Portfolio",
          "Blog/Magazine",
          "Application web",
          "Refonte existant",
        ],
      };
    } else if (!context.hasIndustry) {
      return {
        content:
          "üéØ Super ! Dans quel domaine d'activit√© √™tes-vous ? Nos designers web adaptent l'approche selon votre secteur pour maximiser les conversions.",
        suggestions: [
          "Commerce/E-commerce",
          "Services professionnels",
          "Cr√©atif/Artistique",
          "Technologie",
          "Sant√©",
          "Autre",
        ],
      };
    } else if (!context.hasBudget) {
      return {
        content:
          "ÔøΩÔøΩ Nos d√©veloppeurs vont cr√©er quelque chose d'exceptionnel. Quel budget avez-vous pr√©vu ? Cela nous aide √† d√©finir les fonctionnalit√©s optimales.",
        suggestions: [
          "3000‚Ç¨ - 8000‚Ç¨",
          "8000‚Ç¨ - 15000‚Ç¨",
          "15000‚Ç¨ - 30000‚Ç¨",
          "Plus de 30000‚Ç¨",
          "√Ä discuter",
        ],
      };
    } else {
      return {
        content:
          "‚ö° Parfait ! Avez-vous des fonctionnalit√©s sp√©cifiques en t√™te ? (r√©servation, paiement, blog, etc.)",
        suggestions: [
          "Syst√®me de r√©servation",
          "Paiement en ligne",
          "Espace membre",
          "Blog int√©gr√©",
          "Multilingue",
          "Voir le portfolio web",
        ],
      };
    }
  };

  const getPricingResponse = (message: string, context: any) => {
    return {
      content:
        "üí∞ Nos tarifs sont transparents et adapt√©s √† chaque projet. Nos designers √©valuent chaque demande individuellement pour proposer le meilleur rapport qualit√©-prix. Quel service vous int√©resse sp√©cifiquement ?",
      suggestions: [
        "Logo design",
        "Site web",
        "Design print",
        "Branding complet",
        "Devis personnalis√©",
        "Voir grille tarifaire",
      ],
    };
  };

  const getContactResponse = (message: string, context: any) => {
    return {
      content:
        "üìû Notre √©quipe est l√† pour vous ! Vous pouvez parler directement avec un de nos designers ou d√©marrer votre projet en ligne. Que pr√©f√©rez-vous ?",
      suggestions: [
        "Parler √† un designer",
        "Appel t√©l√©phonique",
        "Commencer mon projet",
        "Envoyer un email",
        "Chat en direct",
      ],
    };
  };

  const getGeneralResponse = (message: string, context: any) => {
    const greetings = ["bonjour", "salut", "hello", "bonsoir", "hi"];
    const isGreeting = greetings.some((greeting) =>
      message.toLowerCase().includes(greeting),
    );

    if (isGreeting) {
      return {
        content:
          "üëã Bonjour ! Je suis MGS IA, votre assistant cr√©atif intelligent chez Mind Graphix Solution. J'analyse vos besoins avec pr√©cision pour vous connecter √† nos designers experts qui cr√©ent des projets exceptionnels. Comment puis-je transformer votre vision en r√©alit√© ?",
        suggestions: [
          "Cr√©er un logo professionnel",
          "D√©velopper un site web",
          "Design print premium",
          "Identit√© de marque compl√®te",
          "Voir nos r√©alisations",
          "Parler √† un expert",
        ],
      };
    }

    // Analyse contextuelle avanc√©e pour les r√©ponses g√©n√©rales
    if (context.emotionalTone === "positive") {
      return {
        content:
          "üöÄ J'adore votre enthousiasme ! Nos designers vont canaliser cette √©nergie pour cr√©er quelque chose d'extraordinaire. Mon analyse indique que vous avez une vision claire. Quel projet vous passionne le plus ?",
        suggestions: [
          "Logo qui marque",
          "Site web innovant",
          "Print percutant",
          "Branding m√©morable",
          "Voir cr√©ations inspirantes",
        ],
      };
    }

    if (context.urgency === "high") {
      return {
        content:
          "‚ö° Je d√©tecte une urgence ! Nos designers sont habitu√©s aux d√©fis temporels. Ils excellent sous pression et peuvent cr√©er des r√©sultats exceptionnels rapidement. Quel est votre projet prioritaire ?",
        suggestions: [
          "Logo express",
          "Site web rapide",
          "Print urgent",
          "Solution imm√©diate",
          "Parler directement",
        ],
      };
    }

    if (context.businessSize === "small") {
      return {
        content:
          "üå± Startup ou petite entreprise ? Parfait ! Nos designers comprennent vos enjeux et cr√©ent des solutions √©volutives avec un excellent ROI. Quel est votre d√©fi cr√©atif principal ?",
        suggestions: [
          "Logo startup",
          "Site MVP",
          "Print budget ma√Ætris√©",
          "Identit√© √©volutive",
          "Solutions startup",
        ],
      };
    }

    return {
      content:
        "üß† Mon analyse de votre message r√©v√®le des besoins cr√©atifs passionnants ! Nos designers experts vont transformer vos id√©es en r√©alisations extraordinaires. Quel univers cr√©atif souhaitez-vous explorer ?",
      suggestions: [
        "Cr√©ation de logo",
        "D√©veloppement web",
        "Design graphique",
        "Strat√©gie de marque",
        "Innovation visuelle",
        "Voir portfolio",
      ],
    };
  };

  const generateBotResponse = async (userMessage: string, analysis: any) => {
    // Utilisation du syst√®me contextuel intelligent
    const context = getConversationContext();
    const intent = analysis.intent;

    // Analyse avanc√©e du message pour une compr√©hension extraordinaire
    const advancedAnalysis = analyzeMessageAdvanced(userMessage, context);

    // R√©ponses contextuelles selon l'intention et l'historique
    if (intent === "logo_design") {
      return getLogoDesignResponse(userMessage, {
        ...context,
        ...advancedAnalysis,
      });
    } else if (intent === "website") {
      return getWebsiteResponse(userMessage, {
        ...context,
        ...advancedAnalysis,
      });
    } else if (intent === "print_design") {
      return getPrintDesignResponse(userMessage, {
        ...context,
        ...advancedAnalysis,
      });
    } else if (intent === "branding") {
      return getBrandingResponse(userMessage, {
        ...context,
        ...advancedAnalysis,
      });
    } else if (intent === "pricing") {
      return getPricingResponse(userMessage, {
        ...context,
        ...advancedAnalysis,
      });
    } else if (intent === "contact") {
      return getContactResponse(userMessage, {
        ...context,
        ...advancedAnalysis,
      });
    } else {
      return getGeneralResponse(userMessage, {
        ...context,
        ...advancedAnalysis,
      });
    }
  };

  const analyzeMessageAdvanced = (message: string, context: any) => {
    const words = message.toLowerCase().split(" ");

    // Analyse du sentiment pour cette fonction
    const positiveWords = [
      "excellent",
      "parfait",
      "g√©nial",
      "super",
      "merci",
      "oui",
    ];
    const negativeWords = [
      "probl√®me",
      "erreur",
      "non",
      "difficile",
      "impossible",
    ];
    const hasPositive = words.some((word) => positiveWords.includes(word));
    const hasNegative = words.some((word) => negativeWords.includes(word));
    let sentiment: "positive" | "neutral" | "negative" = "neutral";
    if (hasPositive && !hasNegative) sentiment = "positive";
    if (hasNegative && !hasPositive) sentiment = "negative";

    return {
      urgency: words.some((w) =>
        ["urgent", "rapidement", "vite", "press√©"].includes(w),
      )
        ? "high"
        : words.some((w) => ["semaine", "mois"].includes(w))
          ? "medium"
          : "low",
      businessSize: words.some((w) => ["startup", "pme", "petite"].includes(w))
        ? "small"
        : words.some((w) => ["grande", "groupe", "corporation"].includes(w))
          ? "large"
          : "medium",
      experienceLevel: words.some((w) =>
        ["premi√®re", "jamais", "nouveau"].includes(w),
      )
        ? "beginner"
        : words.some((w) => ["d√©j√†", "avant", "exp√©rience"].includes(w))
          ? "experienced"
          : "medium",
      emotionalTone: sentiment,
      specificNeeds: extractSpecificNeeds(words),
      technicalLevel: words.some((w) =>
        ["technique", "api", "code", "d√©veloppement"].includes(w),
      )
        ? "high"
        : "low",
    };
  };

  const extractSpecificNeeds = (words: string[]) => {
    const needs = [];
    if (words.some((w) => ["moderne", "contemporain", "actuel"].includes(w)))
      needs.push("modern");
    if (
      words.some((w) => ["professionnel", "s√©rieux", "corporate"].includes(w))
    )
      needs.push("professional");
    if (words.some((w) => ["cr√©atif", "original", "unique"].includes(w)))
      needs.push("creative");
    if (words.some((w) => ["simple", "√©pur√©", "minimaliste"].includes(w)))
      needs.push("minimalist");
    if (words.some((w) => ["color√©", "vibrant", "dynamique"].includes(w)))
      needs.push("vibrant");
    return needs;
  };

  const getOldResponses = (analysis: { intent: string }) => {
    const responses = {
      logo_design: [
        "üé® Parfait ! Nos designers experts vont cr√©er un logo unique pour vous. Ils utilisent des outils d'analyse avanc√©s pour comprendre votre secteur et cr√©er des propositions personnalis√©es. Quel est le nom de votre entreprise ?",
        "‚ú® Excellente id√©e ! Notre √©quipe de designers talentueux cr√©e des logos innovants. Ils analysent votre march√© pour proposer des concepts uniques. Parlez-moi de votre projet !",
      ],
      website: [
        "üåê Fantastique ! Nos d√©veloppeurs et designers web cr√©ent des sites exceptionnels. Ils utilisent des outils d'analyse pour optimiser l'UX selon votre secteur. Quel type de site envisagez-vous ?",
        "üöÄ Super choix ! Notre √©quipe cr√©e des sites web qui maximisent l'engagement. Nos designers analysent votre secteur pour proposer la meilleure approche. D√©crivez-moi votre vision !",
      ],
      pricing: [
        "üí∞ Nos tarifs sont transparents et adapt√©s √† votre projet. Nos experts √©valuent chaque demande pour proposer le prix optimal selon vos besoins. Voulez-vous un devis personnalis√© ?",
        "üìä Excellente question ! Notre √©quipe analyse chaque projet pour proposer le meilleur rapport qualit√©-prix. Quel service vous int√©resse ?",
      ],
      contact: [
        "üìû Nous sommes l√† pour vous ! Vous pouvez nous contacter directement ou commencer un projet maintenant. Que pr√©f√©rez-vous ?",
        "‚úâÔøΩÔøΩÔøΩ Perfect ! Notre √©quipe est disponible 24/7. Souhaitez-vous planifier un appel ou poser votre question ici ?",
      ],
      general: [
        "ü§ñ Je suis l√† pour vous connecter avec nos experts ! Notre √©quipe de designers talentueux cr√©e des solutions parfaites. Que puis-je cr√©er pour vous aujourd'hui ?",
        "‚ö° Dites-moi tout ! Je vais analyser vos besoins pour vous proposer les meilleures solutions cr√©atives de notre √©quipe.",
        "üéØ Excellent ! Nos designers combinent cr√©ativit√© et outils intelligents. Quel d√©fi cr√©atif puis-je confier √† notre √©quipe pour vous ?",
      ],
    };

    const responseOptions =
      responses[analysis.intent as keyof typeof responses] || responses.general;
    const selectedResponse =
      responseOptions[Math.floor(Math.random() * responseOptions.length)];

    const suggestions = {
      logo_design: [
        "Voir des exemples",
        "Commencer le brief",
        "Parler √† un designer",
        "Quel est votre secteur ?",
      ],
      website: [
        "Types de sites",
        "Voir portfolio",
        "Demander un devis",
        "Quel est votre budget ?",
      ],
      print_design: [
        "Voir exemples print",
        "Affiches",
        "Brochures",
        "Cartes de visite",
        "Quel type de support ?",
      ],
      branding: [
        "Voir portfolio branding",
        "Identit√© compl√®te",
        "Charte graphique",
        "Parler √† un designer",
      ],
      pricing: [
        "Devis gratuit",
        "Voir nos tarifs",
        "Planifier un appel",
        "Quel service vous int√©resse ?",
      ],
      contact: [
        "Nous appeler",
        "Envoyer un email",
        "Chat direct",
        "Planifier un RDV",
      ],
      general: [
        "Cr√©er un logo",
        "Site web",
        "Design print",
        "Identit√© de marque",
        "Nos services",
      ],
    };

    return {
      content: selectedResponse,
      suggestions:
        suggestions[analysis.intent as keyof typeof suggestions] ||
        suggestions.general,
    };
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: inputMessage,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    setIsTyping(true);

    // Analyse IA du message
    const analysis = analyzeMessage(inputMessage);

    // D√©lai r√©aliste de traitement
    await new Promise((resolve) =>
      setTimeout(resolve, 1500 + Math.random() * 1000),
    );

    const botResponse = await generateBotResponse(inputMessage, analysis);

    const botMessage: Message = {
      id: (Date.now() + 1).toString(),
      type: "bot",
      content: botResponse.content,
      timestamp: new Date(),
      suggestions: botResponse.suggestions,
      aiAnalysis: analysis,
    };

    setMessages((prev) => [...prev, botMessage]);
    setIsTyping(false);
  };

  const handleSuggestionClick = async (suggestion: string) => {
    // Cr√©er directement le message utilisateur avec la suggestion
    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: suggestion,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setIsTyping(true);

    // Analyse IA du message
    const analysis = analyzeMessage(suggestion);

    // D√©lai r√©aliste de traitement
    await new Promise((resolve) =>
      setTimeout(resolve, 1500 + Math.random() * 1000),
    );

    const botResponse = await generateBotResponse(suggestion, analysis);

    const botMessage: Message = {
      id: (Date.now() + 1).toString(),
      type: "bot",
      content: botResponse.content,
      timestamp: new Date(),
      suggestions: botResponse.suggestions,
      aiAnalysis: analysis,
    };

    setMessages((prev) => [...prev, botMessage]);
    setIsTyping(false);
  };

  const toggleVoiceRecording = () => {
    setIsListening(!isListening);
    // Simulation de reconnaissance vocale
    if (!isListening) {
      setTimeout(() => {
        setIsListening(false);
        setInputMessage("Je voudrais cr√©er un logo pour mon entreprise");
      }, 2000);
    }
  };

  const getPersonalityColor = () => {
    const colors = {
      professional: "from-blue-500 to-cyan-500",
      creative: "from-purple-500 to-pink-500",
      friendly: "from-green-500 to-emerald-500",
    };
    return colors[botPersonality as keyof typeof colors];
  };

  if (!isOpen) {
    return (
      <motion.div
        initial={{ scale: 0, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        className="fixed bottom-6 right-6 z-50"
      >
        <Button
          onClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            onToggle();
          }}
          className={`w-16 h-16 rounded-full bg-gradient-to-r ${getPersonalityColor()} shadow-2xl hover:shadow-3xl transition-all duration-300 relative overflow-hidden`}
          title="Ouvrir le chat IA"
        >
          <motion.div
            animate={{
              rotate: [0, 360],
              scale: [1, 1.1, 1],
            }}
            transition={{
              duration: 4,
              repeat: Infinity,
              ease: "easeInOut",
            }}
          >
            <Brain className="w-8 h-8 text-white" />
          </motion.div>

          {/* Pulse animation */}
          <motion.div
            className="absolute inset-0 rounded-full border-4 border-white/30"
            animate={{
              scale: [1, 1.5, 1],
              opacity: [1, 0, 1],
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeOut",
            }}
          />

          {/* Notification dot */}
          <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
            <Sparkles className="w-2 h-2 text-white" />
          </div>
        </Button>
      </motion.div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20, scale: 0.9 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: 20, scale: 0.9 }}
      className={`fixed bottom-6 right-6 z-50 transition-all duration-300 ${
        isMinimized ? "w-80 h-16" : "w-96 h-[600px]"
      }`}
    >
      <Card className="h-full flex flex-col overflow-hidden border-0 shadow-2xl bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
        {/* Header */}
        <CardHeader
          className={`p-4 bg-gradient-to-r ${getPersonalityColor()} text-white relative overflow-hidden`}
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <motion.div
                animate={{ rotate: [0, 360] }}
                transition={{ duration: 10, repeat: Infinity, ease: "linear" }}
                className="relative"
              >
                <Brain className="w-8 h-8" />
                <motion.div
                  className="absolute inset-0"
                  animate={{ opacity: [0.5, 1, 0.5] }}
                  transition={{ duration: 2, repeat: Infinity }}
                >
                  <Sparkles className="w-8 h-8" />
                </motion.div>
              </motion.div>
              <div>
                <h3 className="font-bold text-lg">MGS IA</h3>
                <div className="flex items-center gap-1 text-xs opacity-90">
                  <Zap className="w-3 h-3" />
                  <span>Intelligence Cr√©ative</span>
                  <motion.div
                    animate={{ scale: [1, 1.2, 1] }}
                    transition={{ duration: 1, repeat: Infinity }}
                    className="w-2 h-2 bg-green-400 rounded-full"
                  />
                </div>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  setIsMinimized(!isMinimized);
                }}
                className="text-white hover:bg-white/20"
                title={isMinimized ? "Agrandir le chat" : "R√©duire le chat"}
              >
                {isMinimized ? (
                  <Maximize2 className="w-4 h-4" />
                ) : (
                  <Minimize2 className="w-4 h-4" />
                )}
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  onToggle();
                }}
                className="text-white hover:bg-white/20"
                title="Fermer le chat"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>

          {/* Neural network background */}
          <div className="absolute inset-0 opacity-20">
            {[...Array(20)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute w-1 h-1 bg-white rounded-full"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`,
                }}
                animate={{
                  opacity: [0, 1, 0],
                  scale: [0, 1, 0],
                }}
                transition={{
                  duration: 3,
                  repeat: Infinity,
                  delay: Math.random() * 2,
                }}
              />
            ))}
          </div>
        </CardHeader>

        {!isMinimized && (
          <>
            {/* Messages */}
            <CardContent className="flex-1 p-0 bg-gray-900 text-white overflow-hidden">
              <div
                ref={chatContainerRef}
                className="h-full overflow-y-auto p-4 space-y-4 scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800"
              >
                <AnimatePresence>
                  {messages.map((message) => (
                    <motion.div
                      key={message.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
                    >
                      <div
                        className={`max-w-[80%] ${message.type === "user" ? "order-2" : "order-1"}`}
                      >
                        {message.type === "bot" && (
                          <div className="flex items-center gap-2 mb-2">
                            <div
                              className={`w-8 h-8 rounded-full bg-gradient-to-r ${getPersonalityColor()} flex items-center justify-center`}
                            >
                              <Bot className="w-4 h-4 text-white" />
                            </div>
                            <span className="text-xs text-gray-400">
                              MGS IA
                            </span>
                            {message.aiAnalysis && (
                              <Badge
                                className={`text-xs ${
                                  message.aiAnalysis.sentiment === "positive"
                                    ? "bg-green-500"
                                    : message.aiAnalysis.sentiment ===
                                        "negative"
                                      ? "bg-red-500"
                                      : "bg-gray-500"
                                }`}
                              >
                                {Math.round(
                                  message.aiAnalysis.confidence * 100,
                                )}
                                %
                              </Badge>
                            )}
                          </div>
                        )}

                        <div
                          className={`p-3 rounded-2xl ${
                            message.type === "user"
                              ? "bg-gradient-to-r from-primary to-accent text-white ml-4"
                              : "bg-gray-800 border border-gray-700"
                          }`}
                        >
                          <p className="text-sm leading-relaxed">
                            {message.content}
                          </p>
                          {message.type === "user" && (
                            <div className="text-xs opacity-75 mt-1">
                              {message.timestamp.toLocaleTimeString()}
                            </div>
                          )}
                        </div>

                        {message.suggestions && (
                          <motion.div
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.5 }}
                            className="flex flex-wrap gap-2 mt-2"
                          >
                            {message.suggestions.map((suggestion, index) => (
                              <Button
                                key={index}
                                variant="outline"
                                size="sm"
                                onClick={() =>
                                  handleSuggestionClick(suggestion)
                                }
                                className="text-xs bg-gray-800 border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white transition-all duration-200"
                              >
                                {suggestion}
                              </Button>
                            ))}
                          </motion.div>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </AnimatePresence>

                {isTyping && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex justify-start"
                  >
                    <div className="flex items-center gap-2">
                      <div
                        className={`w-8 h-8 rounded-full bg-gradient-to-r ${getPersonalityColor()} flex items-center justify-center`}
                      >
                        <Bot className="w-4 h-4 text-white" />
                      </div>
                      <div className="bg-gray-800 border border-gray-700 p-3 rounded-2xl">
                        <div className="flex items-center gap-1">
                          <span className="text-xs text-gray-400">
                            MGS IA analyse...
                          </span>
                          <motion.div className="flex gap-1">
                            {[0, 1, 2].map((i) => (
                              <motion.div
                                key={i}
                                className="w-1.5 h-1.5 bg-primary rounded-full"
                                animate={{
                                  y: [0, -8, 0],
                                  opacity: [0.3, 1, 0.3],
                                }}
                                transition={{
                                  duration: 1,
                                  repeat: Infinity,
                                  delay: i * 0.2,
                                }}
                              />
                            ))}
                          </motion.div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
                <div ref={messagesEndRef} />
              </div>
            </CardContent>

            {/* Input */}
            <div className="p-4 bg-gray-800 border-t border-gray-700">
              <div className="flex items-center gap-2">
                <div className="flex-1 relative">
                  <Input
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                    placeholder="Tapez votre message..."
                    className="bg-gray-900 border-gray-600 text-white placeholder-gray-400 pr-12"
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={toggleVoiceRecording}
                    className={`absolute right-2 top-1/2 transform -translate-y-1/2 p-1 ${
                      isListening
                        ? "text-red-500 animate-pulse"
                        : "text-gray-400 hover:text-white"
                    }`}
                  >
                    {isListening ? (
                      <MicOff className="w-4 h-4" />
                    ) : (
                      <Mic className="w-4 h-4" />
                    )}
                  </Button>
                </div>
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputMessage.trim() || isTyping}
                  className={`bg-gradient-to-r ${getPersonalityColor()} hover:scale-105 transition-all duration-200`}
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>

              {/* Quick actions intelligentes */}
              <div className="flex gap-2 mt-2 overflow-x-auto">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    handleSuggestionClick("Je veux cr√©er un logo professionnel")
                  }
                  className="text-xs bg-gray-900 border-gray-600 text-gray-300 hover:bg-gray-700 whitespace-nowrap"
                >
                  <Palette className="w-3 h-3 mr-1" />
                  Logo Pro
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    handleSuggestionClick(
                      "Je veux d√©velopper un site web moderne",
                    )
                  }
                  className="text-xs bg-gray-900 border-gray-600 text-gray-300 hover:bg-gray-700 whitespace-nowrap"
                >
                  <Monitor className="w-3 h-3 mr-1" />
                  Site Web
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    handleSuggestionClick("Je veux cr√©er des supports print")
                  }
                  className="text-xs bg-gray-900 border-gray-600 text-gray-300 hover:bg-gray-700 whitespace-nowrap"
                >
                  <FileText className="w-3 h-3 mr-1" />
                  Print
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    handleSuggestionClick("Je veux un devis personnalis√©")
                  }
                  className="text-xs bg-gray-900 border-gray-600 text-gray-300 hover:bg-gray-700 whitespace-nowrap"
                >
                  <FileText className="w-3 h-3 mr-1" />
                  Devis
                </Button>
              </div>
            </div>
          </>
        )}
      </Card>
    </motion.div>
  );
};

export default FuturisticAIBot;
